{"version":3,"sources":["img/logo.png","assets/PQuA 2021 Templates.zip","components/HeaderBar.js","components/sub-components/PickerMenu.js","components/sub-components/TableComponent.js","components/sub-components/SnackbarNotif.js","services/AxiosHelper.js","redux/reducers/bugDataResultsSlice.js","redux/reducers/showTableViewSlice.js","components/sub-components/MUIDatePicker.js","components/sub-components/PlatformRadioGroup.js","components/ViewBugData.js","components/SidebarMenu.js","components/AddUpdateProduct.js","redux/reducers/pquaResultsSlice.js","services/ManageSession.js","services/GlaasAuth.js","components/ExtractPquaAqbData.js","components/sub-components/BenchmarkProducts.js","components/sub-components/MixedCharts.js","components/sub-components/DefaultAqbPods.js","components/sub-components/MultiPickerMenu.js","components/sub-components/CustomAqbPods.js","components/DownloadAqbPods.js","App.js","serviceWorker.js","redux/reducers/userSlice.js","store.js","index.js"],"names":["module","exports","HeaderBar","PickerMenu","props","list","this","selectionHandler","flexGrow","isDisabled","length","label","onSelectionChange","selectedKey","map","listItem","key","Component","TableComponent","headers","data","aria-label","marginTop","height","overflowMode","header","entry","Object","keys","cellKey","direction","gap","alignItems","href","target","size","SnackbarNotif","message","severity","handler","Snackbar","open","autoHideDuration","anchorOrigin","vertical","horizontal","onClose","Alert","variant","sx","position","bottom","maxWidth","fontStyle","AxiosHelper","endpoint","type","promise","Promise","resolve","reject","axios","get","api","baseApi","then","response","catch","error","request","stack","params","post","responseType","responseObject","object","bugDataResultsSlice","createSlice","name","initialState","value","reducers","addResults","state","action","push","payload","removeResults","pop","actions","showTableViewSlice","pquaTableView","bugDataTableView","showPquaTableView","hidePquaTableView","showBugDataTableView","hideBugDataTableView","MUIDatePicker","startDate","endDate","dateHandler","LocalizationProvider","dateAdapter","AdapterDateFns","DateRangePicker","startText","endText","disableFuture","onChange","newValue","renderInput","startProps","endProps","Fragment","TextField","backgroundColor","InputProps","style","fontSize","fontFamily","color","Box","mx","PlatformRadioGroup","radioValue","orientation","ViewBugData","productList","categoryList","selectedProductName","selectedPlatform","selectedCategory","totalCategoriesSelected","isFetchButtonDisabled","fetchingResults","showToastMessage","toastMessage","toastVariant","resourceLoadingError","onProductSelection","setState","enableFetchButton","platformSelectionHandler","console","log","onCategorySelection","selectedKeys","array","onFetchResults","selectedProduct","selectedStartDate","selectedEndDate","postMethodCall","viewerApis","dataResult","status","dataKey","record","product","category","bugCount","count","jiraLink","link","onSnackbarClose","e","handleDateRange","bind","newDates","Date","getMonth","toString","getDate","getFullYear","subSectionView","snackbarNotif","showTableView","bugDataResults","labelPosition","isIndeterminate","margin","marginX","marginY","level","alignSelf","isHidden","for","class","selectionMode","onPress","mapDispatchToProps","connect","SidebarMenu","defaultSelectedKeys","title","paddingRight","className","to","AddUpdateProduct","jqlValue","jqlLastModifiedBy","editButtonDisabled","jqlFieldEditingDisabled","addUpdateButtonDisabled","fetchingResponse","processingSubmissionFlag","showToastMessageMessage","submissionbuttonID","isAddButtonDisabled","jqlExistsForProductAndCategory","jqlSubmissionHandler","event","localStorage","getItem","iqeApis","postJql","jqlEditButtonHandler","productSelectionHandler","fetchExistingJQL","categorySelectionHandler","caller","fetchJQL","toastLoaderView","minWidth","isReadOnly","hidden","pquaResultsSlice","ManageSession","expireTime","getTime","GlaasAuth","glaasAuthUrl","glaasUrl","glaasAuthApi","clientId","window","location","authToken","postHeaders","glaasCheckSessionApi","authenticate","includes","parseUriWithHash","checkSession","setItem","expiresOn","ldap","email","clear","uri","tmp","split","i","val","access_token","ExtractPquaAqbData","downloadInProgress","onFetchPquaResults","ifSessionExpired","pquaAqbApis","pquaResult","createTableData","downloadPQuASheet","pquaDownload","pquaResults","product_name","platform","end_date","sheetName","url","URL","createObjectURL","Blob","document","createElement","setAttribute","body","appendChild","click","parentNode","removeChild","downloadButton","isQuiet","marginStart","start_date","padding","help","pquaWiki","textDecoration","template","download","BenchmarkProducts","webProducts","web","mobileProducts","mobile","desktopProducts","desktop","webProduct","mobileProduct","desktopProduct","MixedCharts","chartTitle","lowerBandRGB","lowerBandColor","upperBandRGB","upperBandColor","width","loader","chartType","options","seriesType","vAxis","format","minValue","maxValue","series","0","1","2","3","legend","rootProps","DefaultAqbPods","lowerBand","upperBand","viewWindow","min","max","CustomAqbPods","selectedProducts","comboInputValue","selectedComboKey","isGenerateButtonDisabled","duplicateProductSelected","generatingPods","plotAqbPods","dataToPlot","addProductToList","arrayOfProducts","enableGenerateButton","generateCustomPods","aqbPods","plotCustomPods","selected","start","end","productToRemove","index","selectedProductsArray","splice","responseData","chartData","productData","Product","Values","and","disabled","invalid","onInputChange","onSelect","quiet","required","isOpen","headerFormat","placement","selectionType","startDay","dateRangeSelectionHandler","Accordion","ariaLevel","defaultSelectedIndex","multiselectable","onItemClick","removeSelectedProduct","Grid","offsetSize","DownloadAqbPods","withCookies","App","serverError","badRequest","verifyingSession","productArray","productName","fetchProductsAndCategories","categoryListArray","glaasGetMethodCall","glaasProductApi","setUserProductList","getMethodCall","allBugCategories","justifySelf","gridArea","path","exact","render","component","areas","columns","rows","innerHeight","renderAppContent","faqsPage","pquaGrpEmail","Boolean","hostname","match","userSlice","setUser","removeUser","store","configureStore","reducer","bugDataResultsReducer","showTableViewReducer","pquaResultsReducer","ReactDOM","StrictMode","theme","defaultTheme","colorScheme","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0320e6dc.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.99faade2.png\";","module.exports = __webpack_public_path__ + \"static/media/PQuA 2021 Templates.a205cfb0.zip\";","import React from 'react'\nimport {Flex, View, Heading, Image } from '@adobe/react-spectrum'\nimport logo from '../img/logo.png'\n\nexport function HeaderBar() {\n    return(\n        <Flex\n                direction=\"row\"\n                alignItems=\"center\" >\n                <View\n                    marginStart=\"size-130\"\n                    alignSelf=\"left\"\n                    flexGrow=\"1\">\n                    <Image\n                        src={logo}\n                        alt=\"PQuA Automation logo\"\n                        width=\"size-500\"\n                        height=\"size-500\"\n                        objectFit=\"contain\"\n                    />\n                </View>\n                <View\n                    flexGrow=\"70\">\n                    <span style={{ color: \"#F5F5F5\" }}>\n                        <Heading level={1}>PQuA Automation</Heading>\n                    </span>\n                </View>\n                <View\n                    alignSelf=\"right\"\n                    flexGrow=\"1\">\n                    <span style={{ color: \"#F5F5F5\" }}>\n                        <Heading level={3}>{localStorage.getItem('userName')}</Heading>\n                    </span>\n                </View>\n            </Flex>\n    )\n}\n\nexport default HeaderBar;\n","import React, {Component} from 'react';\nimport { Picker, Item} from '@adobe/react-spectrum';\n\nclass PickerMenu extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render(){\n        let list = this.props.list;\n        let selectionHandler = this.props.selectionHandler;\n        return(\n                <Picker\n                flexGrow=\"400\"\n                isDisabled={list.length == 0}\n                label={this.props.label}\n                    onSelectionChange={(selectedKey) => selectionHandler(selectedKey)}>\n                    {\n                        list.map(listItem => <Item key={listItem}>{listItem}</Item>)\n                    }\n                </Picker>\n            )\n        }\n}\n\nexport default PickerMenu;","import React, {Component} from 'react'\nimport { TableView, TableHeader, TableBody, Row, Column, Cell} from '@react-spectrum/table'\nimport { Link, Flex } from '@adobe/react-spectrum'\nimport LinkOutLight from '@spectrum-icons/workflow/LinkOutLight';\n//import { Link } from 'react-router-dom';\n\nclass TableComponent extends Component {\n    render(){\n        let headers = this.props.headers;\n        let data = this.props.data;\n        let tableBody;\n\n        /*Object.keys(data).forEach((rowKey) => {\n            let row;\n            Object.keys(data[rowKey]).forEach((cellKey) => {\n                row.add(data[rowKey][cellKey]);\n            }\n        })*/\n\n        return(\n            <TableView aria-label=\"Generic table component\" marginTop=\"size-300\" height=\"size=3000\" overflowMode=\"wrap\">\n                <TableHeader>\n                {\n                     headers.map((header) => {\n                        return <Column>{header}</Column>\n                     })\n                }\n                </TableHeader>\n                <TableBody>\n               {\n                   data.map(entry => {\n                        return <Row>\n                            {\n                                Object.keys(entry).map(cellKey => {\n                                    if(cellKey == \"jiraLink\" && entry[cellKey] != \"No JQL Query Found\") {\n                                        return <Cell>\n                                                    <Flex direction=\"row\" gap=\"size-50\" alignItems=\"end\">\n                                                        <Link>\n                                                            <a href={entry[cellKey]} target=\"_blank\">\n                                                                View in Jira\n                                                            </a>\n                                                        </Link>\n                                                        <LinkOutLight size='XS'/>\n                                                    </Flex>\n                                            </Cell>\n                                    }\n                                    else {\n                                        return <Cell>{entry[cellKey]}</Cell>\n                                    }\n                                })\n                        }\n                            </Row>\n                   })\n\n                }\n                </TableBody>\n            </TableView>\n        )\n    }\n}\n\nexport default TableComponent;","import React, {Component} from 'react';\nimport { Snackbar } from '@mui/material'\nimport { Alert } from '@mui/material'\n\nclass SnackbarNotif extends Component {\n    render(){\n        let message = this.props.message;\n        let severity = this.props.severity;\n        let handler = this.props.handler;\n\n        return(\n            <Snackbar\n                open=\"true\"\n                autoHideDuration={3000}\n                anchorOrigin={{vertical : 'bottom', horizontal : 'center'}}\n                onClose={handler}\n                >\n                <Alert severity={severity} variant=\"filled\" sx={{ position: \"absolute\", bottom: 30, maxWidth: '50%', fontStyle: \"Adobe Clean\" }}>\n                {message}\n                </Alert>\n            </Snackbar>\n        )\n    }\n}\n\nexport default SnackbarNotif;","import axios from 'axios';\nimport api from '../services/ApiMap.json';\n\nexport class AxiosHelper {\n\n    static responseObject = {\n        object : null,\n        error : null\n    }\n    static async getMethodCall(endpoint, type){\n        let promise = new Promise((resolve, reject) => {\n            axios.get(api.baseApi+endpoint)                          \n            .then(response => {\n                resolve(response);\n            })\n            .catch(error => {\n                if (error.response) {\n                    reject(error.response.data);\n                }\n                else if (error.request) {\n                    reject(\"Response not recieved\");\n                }\n                else {\n                    reject(error.stack);\n                }\n            })\n        })\n\n        return (await promise);      \n    }\n\n    static async glaasGetMethodCall(endpoint, headers){\n        let promise = new Promise((resolve, reject) => {\n            axios.get(endpoint, headers)                          \n            .then(response => {\n                resolve(response);\n            })\n            .catch(error => {\n                if (error.response) {\n                    reject(error.response.data);\n                }\n                else if (error.request) {\n                    reject(\"Response not recieved\");\n                }\n                else {\n                    reject(error.stack);\n                }\n            })\n        })\n\n        return (await promise);      \n    }\n\n    static async postMethodCall(endpoint, params, type){\n        let promise = new Promise((resolve, reject) => {\n            axios.post(api.baseApi+endpoint, params, { responseType: type })                          \n            .then(response => {\n                resolve(response); \n            })\n            .catch(error => {\n                if(error.response)\n                {\n                    if(error.response.data)\n                        reject(error.response.data);\n                    else\n                        reject(error.response);\n                }\n                else\n                    reject(error);\n            })\n        })\n        return (await promise);\n    }\n\n}\n\nexport default AxiosHelper;","import { createSlice } from '@reduxjs/toolkit'\n\nexport const bugDataResultsSlice = createSlice({\n  name: 'bugDataResults',\n  initialState: {\n    value: []\n  },\n  reducers: {\n    addResults: (state, action) => {\n      state.value.push(action.payload);  \n    },\n    removeResults: state => {\n        while(state.value.length > 0)\n            state.value.pop();\n    }\n  }\n})\n\nexport const { addResults, removeResults } = bugDataResultsSlice.actions\n\nexport const selectBugDataResults = state => state.bugDataResults.value\n\nexport default bugDataResultsSlice.reducer","import { createSlice } from '@reduxjs/toolkit'\n\nexport const showTableViewSlice = createSlice({\n  name: 'showTableView',\n  initialState: {\n    value: {\n      pquaTableView: false,\n      bugDataTableView: false,\n    }\n  },\n  reducers: {\n    showPquaTableView: state => {\n        state.value.pquaTableView = true;    \n    },\n    hidePquaTableView: state => {\n        state.value.pquaTableView = false;\n    },\n    showBugDataTableView: state => {\n        state.value.bugDataTableView = true;\n    },\n    hideBugDataTableView: state => {\n        state.value.bugDataTableView = false;\n    }\n  }\n})\n\nexport const { showPquaTableView, hidePquaTableView, showBugDataTableView, hideBugDataTableView } = showTableViewSlice.actions\n\nexport const selectTableView = state => state.user.value\n\nexport default showTableViewSlice.reducer","import React, { Component } from 'react';\nimport TextField from '@mui/material/TextField';\nimport DateRangePicker from '@mui/lab/DateRangePicker';\nimport AdapterDateFns from '@mui/lab/AdapterDateFns';\nimport LocalizationProvider from '@mui/lab/LocalizationProvider';\nimport Box from '@mui/material/Box';\n\nclass MUIDatePicker extends Component {\n    render() {\n        let startDate = this.props.startDate;\n        let endDate = this.props.endDate;\n        let dateHandler = this.props.dateHandler;\n\n        return(\n            <LocalizationProvider dateAdapter={AdapterDateFns}>\n                <DateRangePicker\n                    startText=\"\"\n                    endText=\"\"\n                    disableFuture\n                    value={[startDate, endDate]}\n                    onChange={(newValue) => {\n                        if(newValue[0] !== null && newValue[1] !== null)\n                            dateHandler(newValue);\n                    }}\n                    renderInput={(startProps, endProps) => (\n                    <React.Fragment>\n                        <TextField \n                        {...startProps} \n                        sx={{ backgroundColor: \"#FAFAFA\" }} \n                        InputProps= {{ \n                            style: {\n                                height: 32,\n                                fontSize: 14,\n                                fontFamily: \"Adobe Clean\",\n                                color: \"#4B4B4B\"\n                            }\n                        }}/>\n                        <Box sx={{ mx: 2, fontFamily: \"Adobe Clean\", fontSize: 14, color: \"#6E6E6E\" }}> to </Box>\n                        <TextField \n                        {...endProps} \n                        sx={{ backgroundColor: \"#FAFAFA\" }}\n                        InputProps= {{ \n                            style: {\n                                height: 32,\n                                fontSize: 14,\n                                fontFamily: \"Adobe Clean\",\n                                color: \"#4B4B4B\"\n                            } \n                        }} />\n                    </React.Fragment>\n                    )}\n                />\n            </LocalizationProvider>    \n        )\n    }\n}\n\nexport default MUIDatePicker;\n","import React, { Component } from 'react'\nimport {RadioGroup, Radio} from '@adobe/react-spectrum'\n\nclass PlatformRadioGroup extends Component {\n    constructor(props) {\n        super(props);\n    }\n    render(){\n        let radioValue = this.props.value;\n        let selectionHandler = this.props.selectionHandler;\n\n        return(\n            <RadioGroup\n            label=\"Platform\" \n            orientation=\"horizontal\"\n            value={radioValue}\n            onChange={(selectedKey) => this.props.selectionHandler(selectedKey)}>\n                <Radio value=\"Desktop\">Desktop</Radio>\n                <Radio value=\"Web\">Web</Radio>\n                <Radio value=\"Mobile - iOS\">Mobile - iOS</Radio>\n                <Radio value=\"Mobile - Android\">Mobile - Android</Radio>\n            </RadioGroup>\n          );\n    }\n}\n\nexport default PlatformRadioGroup;","import React, { Component } from 'react';\nimport { Well, Form, Flex, View, Button, Heading, Text, ProgressBar, ProgressCircle } from '@adobe/react-spectrum';\nimport { Cell, Column, Row, TableHeader, TableView, TableBody } from '@adobe/react-spectrum';\nimport api from '../services/ApiMap.json';\nimport PickerMenu from './sub-components/PickerMenu';\nimport TableComponent from './sub-components/TableComponent';\nimport SnackbarNotif from './sub-components/SnackbarNotif';\nimport AxiosHelper from '../services/AxiosHelper';\nimport { connect } from \"react-redux\";\nimport { addResults, removeResults } from \"../redux/reducers/bugDataResultsSlice\"\nimport { showBugDataTableView, hideBugDataTableView } from \"../redux/reducers/showTableViewSlice\"\nimport label from \"@spectrum-css/fieldlabel\"\nimport MUIDatePicker from './sub-components/MUIDatePicker'\nimport PlatformRadioGroup from './sub-components/PlatformRadioGroup';\n\nclass ViewBugData extends Component {\n\n    constructor() {\n        super();\n        this.handleDateRange = this.handleDateRange.bind(this);\n    }\n\n    state = {\n        productList: [],\n        categoryList: [],\n        selectedProductName: '',\n        selectedPlatform : '',\n        selectedCategory: [],\n        totalCategoriesSelected: '0 selected',\n        startDate: '',\n        endDate: '',\n        isFetchButtonDisabled: true,\n        fetchingResults: false,\n        showToastMessage: false,\n        toastMessage: '',\n        toastVariant: '',\n        resourceLoadingError: false\n    }\n\n    onProductSelection = (selectedKey) => {\n        this.setState({\n            selectedProductName: selectedKey\n        }, () => { this.enableFetchButton() });\n    }\n\n    platformSelectionHandler = (selectedKey) => {\n        this.setState({\n            selectedPlatform : selectedKey\n        },() => { this.enableFetchButton() });\n        console.log(\"Selected - \"+selectedKey);\n    }\n\n    onCategorySelection = (selectedKeys) => {\n        if (typeof (selectedKeys) === \"string\") {\n            this.setState({\n                selectedCategory: this.props.categoryList,\n                totalCategoriesSelected: this.props.categoryList.length + \" selected\"\n            }, () => { this.enableFetchButton() });            \n        }\n        else if (selectedKeys.size === 0) {\n            this.setState({\n                selectedCategory: [],\n                totalCategoriesSelected: selectedKeys.size + \" selected\"\n            }, () => { this.enableFetchButton() });\n        }\n        else {\n            let array = [];\n            for (const entry of selectedKeys.keys()) {\n                array.push(entry);\n            }\n            this.setState({\n                selectedCategory: array,\n                totalCategoriesSelected: array.length + \" selected\"\n            }, () => { this.enableFetchButton() });\n        }\n    }\n\n    enableFetchButton() {\n        if (this.state.selectedProductName !== '' && this.state.selectedCategory.length !== 0 && this.state.startDate !== '' && this.state.endDate !== '' && this.state.selectedPlatform != '') {\n            this.setState({\n                isFetchButtonDisabled: false\n            });\n        }\n        else {\n            this.setState({\n                isFetchButtonDisabled: true\n            });\n        }\n    }\n\n    handleDateRange(newDates) {\n        let startDate = new Date(newDates[0]);\n        let endDate = new Date(newDates[1]);\n\n        this.setState(\n            {\n                startDate : (startDate.getMonth()+1).toString()+\"/\"+startDate.getDate().toString()+\"/\"+startDate.getFullYear().toString(),\n                endDate : (endDate.getMonth()+1).toString()+\"/\"+endDate.getDate().toString()+\"/\"+endDate.getFullYear().toString()\n            },\n            () => this.enableFetchButton()\n        )\n    }\n    \n    onFetchResults = () => {\n        let params = {\n            \"product_name\": this.state.selectedProductName,\n            \"platform\": this.state.selectedPlatform,\n            \"bug_category\": this.state.selectedCategory,\n            \"start_date\": this.state.startDate,\n            \"end_date\": this.state.endDate\n        }\n        this.setState({ fetchingResults: true, showToastMessage: false });\n        this.props.hideBugDataTableView()\n        this.props.removeResults();\n\n        const selectedProduct = this.state.selectedProductName+\"(\"+this.state.selectedPlatform+\")\";\n        const selectedStartDate = this.state.startDate;\n        const selectedEndDate = this.state.endDate;\n\n        AxiosHelper.postMethodCall(api.viewerApis.dataResult, params)\n            .then((response) => {\n                if (response.status === 200) {\n                    for (let dataKey in response.data) \n                    { \n                        const record = {\n                            product: selectedProduct,\n                            category: dataKey,\n                            startDate: selectedStartDate,\n                            endDate: selectedEndDate,\n                            bugCount: response.data[dataKey].count,\n                            jiraLink: response.data[dataKey].link\n                        }  \n                        this.props.addResults(record);\n                    }\n                    this.setState({\n                        fetchingResults: false,\n                        isFetchButtonDisabled: true\n                    }, () => this.props.showBugDataTableView());\n                }\n                else {\n                    this.setState({\n                        fetchingResults: false,\n                        isFetchButtonDisabled: true,\n                        showToastMessage: true,\n                        toastMessage: \"We're facing issues in fetching this data right now. Please try again later.\",\n                        toastVariant: 'error'\n                    });\n                }\n            })\n            .catch((error) => {\n                this.setState({\n                    fetchingResults: false,\n                    isFetchButtonDisabled: true,\n                    showToastMessage: true,\n                    toastMessage: error,\n                    toastVariant: 'error'\n                });\n            })\n    }\n\n    onSnackbarClose = (e) => {\n        this.setState({ showToastMessage : false });\n    }\n\n    render() {\n        let productList = this.props.productList;\n        let categoryList = this.props.categoryList;\n\n        let subSectionView;\n        if (this.props.showTableView.bugDataTableView)\n            subSectionView = <TableComponent headers={[\"Product\", \"Bug Category\", \"From date\", \"To date\", \"Bug Count\", \"Jira Link\"]} data={this.props.bugDataResults} />\n        else if (this.state.fetchingResults)\n            subSectionView = <View><ProgressBar aria-label=\"Fetching results\" label=\"Fetching results...\" labelPosition=\"top\" isIndeterminate /></View>\n        else\n            subSectionView = <></>\n\n        let snackbarNotif;\n        if(this.state.showToastMessage)\n            snackbarNotif = <SnackbarNotif message={this.state.toastMessage} severity={this.state.toastVariant} handler={this.onSnackbarClose}/>\n        \n        return (\n            <Well margin=\"size-800\" >\n                <Form\n                    marginX=\"size-1000\"\n                    marginY=\"size-200\" >\n                    <Heading level={2}>View Bug Data</Heading>\n                    \n                    <Flex direction=\"row\" gap=\"size-100\">\n                        <PickerMenu label=\"Product\" list={productList} selectionHandler={this.onProductSelection} />\n                        <ProgressCircle flexGrow=\"1\" size=\"S\" isIndeterminate alignSelf=\"end\" isHidden={productList.length > 0}/>\n                    </Flex>\n\n                    <PlatformRadioGroup value={this.state.selectedPlatform} selectionHandler={this.platformSelectionHandler}/>\n                    \n                    <label for=\"lifestory\" class=\"spectrum-FieldLabel spectrum-FieldLabel--sizeM\">Bug Categories ({this.state.totalCategoriesSelected})</label>\n                    <TableView\n                        height=\"size-3000\"\n                        aria-label=\"Example table with dynamic content\"\n                        selectionMode=\"multiple\"\n                        \n                        selectedKeys={this.state.selectedCategory}\n                        onSelectionChange={(selectedKeys) => this.onCategorySelection(selectedKeys)}\n                    >\n                        <TableHeader>\n                            <Column>Select All</Column>\n                        </TableHeader>\n\n                        <TableBody>\n                            {\n                                categoryList.map(listItem =>\n                                    <Row key={listItem}>\n                                        <Cell>{listItem}</Cell>\n                                    </Row>)\n                            }\n                        </TableBody>\n                    </TableView>\n\n                    <Flex\n                        direction=\"row\"\n                        gap=\"size-200\"\n                        alignItems=\"end\"\n                        marginTop=\"size-200\" >\n                        <View>\n                            <label for=\"lifestory\" class=\"spectrum-FieldLabel spectrum-FieldLabel--sizeM\">Date range</label>\n                            <MUIDatePicker startDate={this.state.startDate} endDate={this.state.endDate} dateHandler={(newDates) => this.handleDateRange(newDates)}/>\n                        </View>\n                        <View>\n                            <Button\n                                variant=\"cta\"\n                                isDisabled={this.state.isFetchButtonDisabled}\n                                onPress={this.onFetchResults}>\n                                <Text>Fetch</Text>\n                            </Button>\n                        </View>\n                    </Flex>\n                    {\n                        (this.state.resourceLoadingError && this.state.showToastMessage) ?\n                        <SnackbarNotif message={this.state.toastMessage} severity={this.state.toastVariant} handler={this.onSnackbarClose}/>\n                            : <></>\n                    }\n                    {\n                        subSectionView\n                    }\n                    {\n                        snackbarNotif\n                    }\n                </Form>\n            </Well>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => ({\n    bugDataResults : state.bugDataResults.value,\n    showTableView : state.showTableView.value\n});\n\nconst mapDispatchToProps = { addResults, removeResults, showBugDataTableView, hideBugDataTableView };\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ViewBugData);","import React, {Component} from 'react'\nimport { ListBox, Item, Text, Section } from '@adobe/react-spectrum';\nimport TextNumbered from '@spectrum-icons/workflow/TextNumbered';\nimport GearsEdit from '@spectrum-icons/workflow/GearsEdit';\nimport {Link} from 'react-router-dom';\nimport '../styles/stylesSheet.css';\nimport TableAndChart from '@spectrum-icons/workflow/TableAndChart';\nimport AssetsDownloaded from '@spectrum-icons/workflow/AssetsDownloaded'\nclass SidebarMenu extends Component {\n\n    render() {\n        return(\n            <ListBox\n            aria-label=\"Side Navigation\"\n            defaultSelectedKeys={[\"1\"]} \n            marginTop=\"size-700\">\n                <Section title=\"Manage Data\">\n                <Item key=\"1\">\n                    <Text margin=\"size-75\">\n                        <span style={{paddingRight:\"10px\"}}>\n                            <TableAndChart size=\"S\"/>\n                        </span>\n                        <Link className=\"link\" to=\"/pqua-data\">Extract PQuA Data</Link>\n                    </Text>\n                </Item>\n                {\n                <Item key=\"2\">\n                    <Text margin=\"size-75\">\n                        <span style={{paddingRight:\"10px\"}}>\n                            <AssetsDownloaded size=\"S\" />\n                        </span>\n                        <Link className=\"link\" to=\"/download-pods\">Download AQB Pods</Link>\n                    </Text>\n                </Item>\n                }\n                <Item key=\"3\">\n                    <Text margin=\"size-75\">\n                        <span style={{paddingRight:\"10px\"}}>\n                            <TextNumbered size=\"S\"/>\n                        </span>\n                        <Link className=\"link\" to=\"/bug-data\">View Bug Data</Link>\n                    </Text>\n                </Item>\n                </Section>\n                <Section title=\"Manage Products\">\n                <Item key=\"4\">\n                    <Text margin=\"size-75\">\n                        <span style={{paddingRight:\"10px\"}}>\n                            <GearsEdit size=\"S\" />\n                        </span>\n                        <Link className=\"link\" to=\"/add-update-queries\" >Add/Update Product Queries</Link>\n                    </Text>\n                </Item>\n                </Section>\n            </ListBox>\n        )\n    }\n}\n\nexport default SidebarMenu;\n","import React, {Component} from 'react'\nimport { Form, Button, ActionButton, Well, Flex, View, Heading, ProgressCircle, TextArea, Tooltip, TooltipTrigger, ProgressBar, Content, Header } from '@adobe/react-spectrum'\nimport Edit from '@spectrum-icons/workflow/Edit'\nimport api from '../services/ApiMap.json'\nimport PickerMenu from './sub-components/PickerMenu'\nimport AxiosHelper from '../services/AxiosHelper'\nimport SnackbarNotif from \"./sub-components/SnackbarNotif\"\nimport PlatformRadioGroup from \"./sub-components/PlatformRadioGroup\"\nimport {RadioGroup, Radio} from '@adobe/react-spectrum'\n\nclass AddUpdateProduct extends Component {\n\n    constructor(props) {\n        super(props);\n    }\n    \n    state = {\n        selectedProduct : '',\n        selectedPlatform : '',\n        selectedCategory : '',\n        jqlValue : '',\n        jqlLastModifiedBy : '',\n        editButtonDisabled : true,\n        jqlFieldEditingDisabled : true,\n        addUpdateButtonDisabled : true,\n        fetchingResponse : false,\n        processingSubmissionFlag : false,\n        showToastMessageMessage : false,\n        toastVariant : '',\n        toastMessage : '',\n        submissionbuttonID : '',\n        resourceLoadingError : false,\n        isAddButtonDisabled : true,\n        jqlExistsForProductAndCategory : true\n    }\n    \n    jqlSubmissionHandler = (event) => {\n        let params = {\n            \"product_name\": this.state.selectedProduct,\n            \"platform\": this.state.selectedPlatform,\n            \"bug_category\": this.state.selectedCategory,\n            \"jql_query\": this.state.jqlValue,\n            \"modified_by\": localStorage.getItem('userLdap')\n        }\n\n        this.setState( \n        {\n            showToastMessage : false,\n            processingSubmissionFlag : true,\n            addUpdateButtonDisabled : true,        \n        })\n\n        AxiosHelper.postMethodCall(api.iqeApis.postJql,params)\n        .then((response) => {\n            if (response.status === 200){\n                this.setState( { \n                    processingSubmissionFlag : false,\n                    jqlFieldEditingDisabled : true,\n                    editButtonDisabled : false,\n                    showToastMessage : true,\n                    toastMessage : response.data[\"message\"],\n                    toastVariant : \"success\",\n                    jqlLastModifiedBy : response.data[\"modified_by\"]\n                })\n            }\n            else{\n                this.setState( { \n                    processingSubmissionFlag : false,\n                    jqlFieldEditingDisabled : true,\n                    editButtonDisabled : false,\n                    showToastMessage : true,\n                    toastMessage : response.data,\n                    toastVariant : 'error',\n                    jqlLastModifiedBy : ''\n                })\n            }\n        })\n        .catch((error) => {\n            this.setState( { \n                processingSubmissionFlag : false,\n                jqlFieldEditingDisabled : true,\n                editButtonDisabled : false,\n                showToastMessage : true,\n                toastMessage : error,\n                toastVariant : 'error',\n                jqlLastModifiedBy : ''\n            })\n        })       \n\n    }\n\n    jqlEditButtonHandler = () => {\n        this.setState({\n                editButtonDisabled : true, \n                jqlFieldEditingDisabled : false,\n                jqlExistsForProductAndCategory : true\n            });\n    }\n\n    fetchExistingJQL() {\n        if (this.state.selectedProduct !== '' && this.state.selectedCategory !== '' && this.state.selectedPlatform != '')\n        {\n            this.setState({ \n                fetchingResponse : true, \n                showToastMessage : false \n            })\n\n            const params = {\n                \"product_name\": this.state.selectedProduct,\n                \"platform\": this.state.selectedPlatform,\n                \"bug_category\": this.state.selectedCategory\n            }\n            \n            AxiosHelper.postMethodCall(api.iqeApis.fetchJQL,params)\n            .then((response) => {\n                if (response.status === 200)\n                {\n                    this.setState( { \n                        jqlValue : response.data[\"jql_string\"],\n                        jqlLastModifiedBy : response.data[\"modified_by\"],\n                        editButtonDisabled : false,\n                        fetchingResponse : false,\n                        jqlExistsForProductAndCategory : true\n                    })\n                }\n                else if(response.status === 400 || response.status === 206)\n                {\n                    this.setState( { \n                        jqlValue : '',\n                        jqlLastModifiedBy : '',\n                        editButtonDisabled : false,\n                        fetchingResponse : false,\n                        jqlExistsForProductAndCategory : false,\n                        showToastMessage : true,\n                        toastMessage : response.data,\n                        toastVariant : 'info'\n                    })\n                }\n            })\n            .catch((error) => {\n                this.setState( { \n                    jqlValue : '',\n                    jqlLastModifiedBy : '',\n                    editButtonDisabled : false,\n                    fetchingResponse : false,\n                    jqlExistsForProductAndCategory : false,\n                    showToastMessage : true,\n                    toastMessage : error,\n                    toastVariant : 'error',\n                    \n                })\n            })\n        }\n    }\n\n    productSelectionHandler = (selectedKey) => {\n        this.setState({\n                selectedProduct : selectedKey\n            },() => { this.fetchExistingJQL() });\n    }\n\n    platformSelectionHandler = (selectedKey) => {\n        this.setState({\n            selectedPlatform : selectedKey\n        },() => { this.fetchExistingJQL() });\n    }\n\n    categorySelectionHandler = (selectedKey, caller) => {\n        this.setState({ \n            selectedCategory : selectedKey\n        }, () => { this.fetchExistingJQL() });\n    }\n\n    onSnackbarClose = (e) => {\n        this.setState({ showToastMessage : false });\n    }\n\n    render() {\n        let productList = this.props.productList;\n        let categoryList = this.props.categoryList;\n        let toastLoaderView;\n\n        if(this.state.showToastMessage){\n            toastLoaderView = <SnackbarNotif message={this.state.toastMessage} severity={this.state.toastVariant} handler={this.onSnackbarClose}/>\n        }\n        else if (this.state.processingSubmissionFlag){\n            toastLoaderView = <View>\n                <ProgressBar label=\"Loading…\" isIndeterminate />\n            </View>\n        }\n        else {\n            toastLoaderView = <></>\n        }\n\n        return(\n            <Well margin=\"size-800\">\n                <Form marginX=\"size-1000\" marginY=\"size-200\">\n                    \n                    <Heading level={2}>Add/Update Product Queries</Heading>\n                    <Flex direction=\"row\" gap=\"size-100\">\n                        <PickerMenu label=\"Product\" list={productList} selectionHandler={this.productSelectionHandler}/>\n                        <ProgressCircle flexGrow=\"1\" size=\"S\" isIndeterminate alignSelf=\"end\" isHidden={productList.length > 0}/>\n                    </Flex>\n\n                    <PlatformRadioGroup value={this.state.selectedPlatform} selectionHandler={this.platformSelectionHandler}/>\n                    \n                    <PickerMenu label=\"Bug Category\" list={categoryList} selectionHandler={this.categorySelectionHandler}/>\n                    \n                    <Flex \n                    direction=\"row\"\n                    gap=\"size-100\"\n                    alignItems=\"end\">\n                        \n                            <TextArea\n                                label=\"Enter/Update JQL\"\n                                flexGrow=\"400\"\n                                minWidth=\"size-600\"\n                                isReadOnly={this.state.jqlFieldEditingDisabled} \n                                value={this.state.jqlValue}\n                                onChange={ value => {\n                                    if(value.length !== 0)\n                                    {\n                                        this.setState({ \n                                            addUpdateButtonDisabled : false,\n                                            jqlValue : value\n                                        })\n                                    }\n                                    else {\n                                        this.setState({ \n                                            addUpdateButtonDisabled : true,\n                                            jqlValue : value\n                                        })\n                                    }\n                                } \n                                }/>\n                        \n                        <View\n                        flexGrow=\"1\">\n                            {\n                                this.state.fetchingResponse ? <ProgressCircle aria-label=\"Loading…\" size=\"M\" isIndeterminate /> :\n                                <TooltipTrigger>\n                                        <ActionButton \n                                            alignSelf=\"flex-end\"\n                                            isDisabled={this.state.editButtonDisabled} \n                                            onPress={this.jqlEditButtonHandler}> \n                                            <Edit /> \n                                        </ActionButton>\n                                    <Tooltip>Edit JQL</Tooltip>\n                                </TooltipTrigger>\n                            }\n                        </View>\n                    </Flex>\n                    <label for=\"lifestory\" class=\"spectrum-FieldLabel spectrum-FieldLabel--sizeM\" style={{fontStyle: \"italic\"}} hidden={this.state.jqlLastModifiedBy === null}>Last modified by: {this.state.jqlLastModifiedBy}</label>\n                    { toastLoaderView }\n                    <View>\n                            <Button\n                            variant=\"cta\" \n                            marginTop=\"size-200\"\n                            onPress={this.jqlSubmissionHandler}\n                            isDisabled={this.state.addUpdateButtonDisabled} >\n                            { this.state.jqlExistsForProductAndCategory ? \"Update\" : \"Add\" }\n                            </Button>\n                    </View>\n                    <br/>\n                    <View>\n                        <span style={{fontStyle: 'italic'}} >\n                            <Header><b>Instructions</b></Header>\n                            <Content>\n                                1. Verify the query before submitting.<br/>\n                                2. Do not include date filters in the query.<br/>\n                                3. 'issueType = Bug' or 'type = Bug' is a mandatory filter.<br/>\n                            </Content>\n                        </span>\n                    </View>\n                </Form>\n            </Well>   \n        )\n    }\n}\n\nexport default AddUpdateProduct;\n","import { createSlice } from '@reduxjs/toolkit'\n\nexport const pquaResultsSlice = createSlice({\n  name: 'pquaResults',\n  initialState: {\n    value: []\n  },\n  reducers: {\n    addResults: (state, action) => {\n      state.value.push(action.payload);  \n    },\n    removeResults: state => {\n        while(state.value.length > 0)\n            state.value.pop();\n    }\n  }\n})\n\nexport const { addResults, removeResults } = pquaResultsSlice.actions\n\nexport const selectPquaResults = state => state.pquaResults.value\n\nexport default pquaResultsSlice.reducer","\nexport class ManageSession {\n    \n    static ifSessionExpired() {\n        let expireTime = localStorage.getItem('pquaAuthTokenExpires');\n        if(expireTime == null)\n            return true;\n        else {\n            let currentTime = new Date().getTime();\n            if(currentTime > expireTime) {\n                return true;\n            }\n            else\n                return false;\n        }\n    }\n}","import axios from 'axios'\nimport api from './ApiMap.json'\n\nexport class GlaasAuth {\n    \n    static parseUriWithHash = (uri) => {\n        var tmp = {};\n        var params = uri.split('#')[1].split('&');\n        for (var i=0; i<params.length; i++) {\n          var key = params[i].split('=')[0];\n          var val = params[i].split('=')[1];\n          //chnage name of temp\n          tmp[key] = val;\n        }\n        //console.log(\"Extracted token from url : \"+tmp.access_token);\n        return tmp.access_token;\n    }\n\n    static authenticate() {\n        const glaasAuthUrl = api.glaasUrl+api.glaasAuthApi+api.clientId;\n        window.location.href = glaasAuthUrl;\n    }\n    \n    static async checkSession(authToken) {\n        return await new Promise( (resolve, reject) => {\n            const postHeaders = {\n                headers : {\n                    'Content-Type' : 'application/x-www-form-urlencoded',\n                    'Accept' : 'application/json',\n                    'Authorization' : api.clientId+':'+authToken\n                } \n            }\n            \n            axios.post(api.glaasUrl+api.glaasCheckSessionApi, null, postHeaders )\n            .then((response) => {\n                if(response.status === 200){\n                    console.log(\"Check session - success\");\n                    resolve(response.data);\n                }\n                    \n                else if(response.status === 401){\n                    console.log(\"Check session - unauthorized\\n Initiating auth\")\n                    this.authenticate();\n                }\n            })\n            .catch(error => {\n                if(error.response.status === 500 || error.response.status === 401){\n                    console.log(\"Check session - fail, calling authenticate()\")\n                    this.authenticate();\n                }\n                    \n                if (error.response) {\n                    reject(error.response.data);\n                }\n                else if (error.request) {\n                    reject(\"Response not recieved\");\n                }\n                else {\n                    reject(error.stack);\n                }\n            })\n        })\n        //env dependent glaas url to be used\n    }\n\n    static initiate(){\n        let authToken = null;\n        if(window.location.href.includes(\"access_token\")) {\n            authToken = this.parseUriWithHash(window.location.href);\n            console.log(\"Extracted authToken from window address\")\n        }\n        else {\n            authToken = localStorage.getItem(\"pquaAuthToken\");\n            console.log(\"Extracted authToken from storage\")\n        }\n        console.log(\"Performing checkSession call\")\n        this.checkSession(authToken)\n        .then((response) => {\n            console.log(\"Saving validated authToken & expiration time\")\n            localStorage.setItem('pquaAuthToken', authToken);\n            localStorage.setItem('pquaAuthTokenExpires', response.expiresOn);\n            console.log(\"Saving user info to localStorage\")\n            localStorage.setItem('userLdap',response.ldap);\n            localStorage.setItem('userName', response.name);\n            localStorage.setItem('userEmail', response.email);\n        })\n        .catch((error) => {\n            console.log(error);\n            console.log(\"Removing user info from localStorage\")\n            localStorage.clear();\n        })\n    }\n    \n}\n","import React, { Component } from 'react'\nimport { Well, Form, Flex, View, Button, Heading, ProgressBar, Content, ProgressCircle } from '@adobe/react-spectrum'\nimport TableComponent from './sub-components/TableComponent'\nimport api from '../services/ApiMap.json'\nimport AxiosHelper from '../services/AxiosHelper'\nimport SnackbarNotif from './sub-components/SnackbarNotif'\nimport { connect } from \"react-redux\";\nimport { addResults, removeResults } from \"../redux/reducers/pquaResultsSlice\"\nimport { showPquaTableView, hidePquaTableView } from \"../redux/reducers/showTableViewSlice\"\nimport label from \"@spectrum-css/fieldlabel\"\nimport MUIDatePicker from './sub-components/MUIDatePicker'\nimport PickerMenu from './sub-components/PickerMenu'\nimport help from \"../resources/Help.json\";\nimport template from \"../assets/PQuA 2021 Templates.zip\"\nimport PlatformRadioGroup from './sub-components/PlatformRadioGroup'\nimport { ManageSession } from '../services/ManageSession'\nimport { GlaasAuth } from '../services/GlaasAuth';\n\nclass ExtractPquaAqbData extends Component {\n    \n    state = {\n        selectedProductName : '',\n        selectedPlatform : '',\n        startDate : '',\n        endDate : '',\n        showToastMessage : false,\n        toastVariant : '',\n        toastMessage : '',\n        isFetchButtonDisabled : true,\n        fetchingResults : false,\n        downloadInProgress : true\n    }\n\n    onProductSelection = (selectedKey) => {\n        this.setState({\n               selectedProductName : selectedKey\n        }, () => { this.enableFetchButton() });\n    }\n\n    platformSelectionHandler = (selectedKey) => {\n        this.setState({\n            selectedPlatform : selectedKey\n        },() => { this.enableFetchButton() });\n        console.log(\"Selected - \"+selectedKey);\n    }\n\n    handleDateRange(newDates){\n        let startDate = new Date(newDates[0]);\n        let endDate = new Date(newDates[1]);\n\n        this.setState(\n            {\n                startDate : (startDate.getMonth()+1).toString()+\"/\"+startDate.getDate().toString()+\"/\"+startDate.getFullYear().toString(),\n                endDate : (endDate.getMonth()+1).toString()+\"/\"+endDate.getDate().toString()+\"/\"+endDate.getFullYear().toString()\n            },\n            () => this.enableFetchButton()\n        )\n    }\n\n    enableFetchButton(){\n        if(this.state.selectedProductName !== '' && this.state.startDate !== '' && this.state.endDate !== '' && this.state.selectedPlatform != ''){\n            this.setState( { isFetchButtonDisabled : false })\n        }\n        else {\n            this.setState( { isFetchButtonDisabled : true })\n        }\n    }\n\n    onFetchPquaResults = () => {\n        if(ManageSession.ifSessionExpired()) {\n            this.setState({\n                fetchingResults : false,\n                isFetchButtonDisabled : true,\n                showToastMessage : true,\n                toastMessage : \"Session expired - redirecting for authentication\",\n                toastVariant : 'error'\n            },GlaasAuth.authenticate())\n        }\n        else\n        {\n            let endpoint = api.pquaAqbApis.pquaResult;\n            let authToken = localStorage.getItem('pquaAuthToken');\n            console.log(\"Sending authtoken in params: \"+authToken);\n            const params = {\n                \"product_name\": this.state.selectedProductName,\n                \"platform\": this.state.selectedPlatform,\n                \"start_date\": this.state.startDate,\n                \"end_date\": this.state.endDate,\n                \"auth_token\": authToken\n            }\n            let type = 'json';\n            this.setState({ fetchingResults : true, showToastMessage : false });\n            this.props.hidePquaTableView();\n            this.props.removeResults();\n\n            AxiosHelper.postMethodCall(endpoint,params,type)\n            .then((response) => {\n                if(response.status === 200)\n                {\n                    this.setState({ \n                        fetchingResults : false,\n                        isFetchButtonDisabled : true\n                    },this.createTableData);\n                    this.props.addResults(params);\n                    this.props.showPquaTableView();\n                }\n            })\n            .catch((error) => {\n                this.setState({\n                    fetchingResults : false,\n                    isFetchButtonDisabled : true,\n                    showToastMessage : true,\n                    toastMessage : \"Something went wrong - could not fetch file.\",\n                    toastVariant : 'error'\n                })\n            })\n        }\n    }\n    \n    downloadPQuASheet = () => {\n        let endpoint = api.pquaAqbApis.pquaDownload;\n        const params = {\n            \"product_name\": this.props.pquaResults[0].product_name,\n            \"platform\": this.props.pquaResults[0].platform,\n            \"end_date\": this.props.pquaResults[0].end_date\n        }\n        let type = 'blob';\n        let sheetName = this.state.selectedProductName+\"PQuA_Data_\"+this.state.endDate+\".xlsx\";\n\n        this.setState({ downloadInProgress : false });\n        \n        AxiosHelper.postMethodCall(endpoint, params, type)\n        .then((response) => {\n            this.setState({ downloadInProgress : true });\n            // Create blob link to download\n            const url = window.URL.createObjectURL(new Blob([response.data]));\n            const link = document.createElement('a');\n            link.href = url;\n            link.setAttribute('download', sheetName);\n            document.body.appendChild(link);\n\n            // Start download\n            link.click();\n\n            // Clean up and remove the link\n            link.parentNode.removeChild(link);\n        })\n        .catch((error) => {\n            console.log(error);\n            this.setState({\n                showToastMessage : true,\n                toastMessage : \"Something went wrong - could not download file.\",\n                toastVariant : 'error',\n                downloadInProgress : true\n            })\n        })\n    }   \n\n    onSnackbarClose = (e) => {\n        this.setState({ showToastMessage : false });\n    }\n\n    render() {\n        let productList = this.props.productList;\n\n        let subSectionView;\n        if(this.props.showTableView.pquaTableView){\n            let downloadButton = <Flex direction=\"row\">\n                                    <Button variant=\"cta\" isQuiet onPress={this.downloadPQuASheet}>Download</Button>\n                                    <ProgressCircle marginStart=\"size-100\" size=\"S\" isIndeterminate isHidden={this.state.downloadInProgress} alignSelf=\"center\"/>\n                                </Flex>\n            subSectionView = <TableComponent headers={[\"Product\",\"From Date\", \"To date\", \"Download File\"]} data={[[this.props.pquaResults[0].product_name+\"(\"+this.props.pquaResults[0].platform+\")\", this.props.pquaResults[0].start_date, this.props.pquaResults[0].end_date, downloadButton]]}/>\n        }\n        else if(this.state.fetchingResults)\n            subSectionView = <View padding=\"size-100\"><ProgressBar aria-label=\"Loading results\" label=\"Fetching data... This may take a while.\" isIndeterminate /></View>\n        else if(this.props.showTableView.pquaTableView && this.state.showToastMessage)\n            subSectionView = <></>\n\n        let snackbarNotif = <></>;\n        if(this.state.showToastMessage)\n            snackbarNotif = <SnackbarNotif message={this.state.toastMessage} severity={this.state.toastVariant} handler={this.onSnackbarClose}/>\n        \n        return(\n            <>\n                <Well margin=\"size-800\">\n                    <Form marginX=\"size-1000\" marginY=\"size-200\">\n                        <Heading level={2}>Extract PQuA Data</Heading>\n                        <Flex direction=\"row\" gap=\"size-100\">\n                            <PickerMenu label=\"Product\" list={productList} selectionHandler={this.onProductSelection}/>\n                            <ProgressCircle flexGrow=\"1\" size=\"S\" isIndeterminate alignSelf=\"end\" isHidden={productList.length > 0}/>\n                        </Flex>\n                        \n                        <PlatformRadioGroup value={this.state.selectedPlatform} selectionHandler={this.platformSelectionHandler}/>\n                        \n                        <Flex\n                        direction=\"row\"\n                        gap=\"size-100\"\n                        alignItems=\"end\"\n                        marginTop=\"size-200\">\n                            <View>\n                            { /*Change this Datepicker implementation after release of Datepicker v3 component*/ }\n                            <label for=\"lifestory\" class=\"spectrum-FieldLabel spectrum-FieldLabel--sizeM\">Date range</label>\n                                <MUIDatePicker startDate={this.state.startDate} endDate={this.state.endDate} dateHandler={(newDates) => this.handleDateRange(newDates)}  />                                                                                             \n                            </View>\n                            <Button \n                            variant=\"cta\"\n                            isDisabled={this.state.isFetchButtonDisabled}\n                            onPress={this.onFetchPquaResults}>\n                                Fetch\n                            </Button>\n                        </Flex>\n                        {\n                            subSectionView\n                        }\n                        {\n                            snackbarNotif\n                        }\n                    </Form>\n                </Well>\n                <Well margin=\"size-800\">\n                    <View marginX=\"size-1000\" marginY=\"size-200\">\n                        <Heading>\n                            What's new in the 2021 PQuA template\n                        </Heading>\n                        <Content>\n                            <ul>\n                                <li>\n                                    New slides on \n                                    <ul>\n                                        <li>\n                                        INTL Ready Automation Framework\n                                        </li>\n                                        <li>\n                                        CICLCD with ODIS\n                                        </li>\n                                        <li>\n                                        Customer LOC Bugs Highlight\n                                        </li>\n                                    </ul>\n                                </li>\n                                <li>More sample slides added for Functional Testing Double Click</li>\n                                <li>Modifications in <i>WR Assessment</i> and <i>Goals</i> slides for action items on Core team</li>\n                                <li>New theme and outline in accordance with the new Adobe template</li>\n                                <li>Visit the <a href={help.pquaWiki} target=\"_blank\" style={{textDecoration:\"none\"}}>PQuA wiki</a> for more</li>\n                            </ul>\n                        </Content>\n                        <a href={template} \n                        download=\"PQuA Template 2021\"\n                        style={{ textDecoration: 'none' }}>\n                            <Button\n                            variant=\"cta\"\n                            >Download 2021 PQuA Template</Button>\n                        </a>    \n                    </View>\n                </Well>\n            </>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => ({\n    pquaResults : state.pquaResults.value,\n    showTableView : state.showTableView.value\n});\n\nconst mapDispatchToProps = { addResults, removeResults, showPquaTableView, hidePquaTableView };\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ExtractPquaAqbData);","import React, {Component} from 'react';\nimport { Flex, Text, View, Well, Heading, ListBox, Section, Item } from '@adobe/react-spectrum';\n\nclass BenchmarkProducts extends Component{\n    constructor(props) {\n        super(props);\n    }\n\n    render(){\n        let webProducts = this.props.web;\n        let mobileProducts = this.props.mobile;\n        let desktopProducts = this.props.desktop;\n\n        return(\n            <Well marginTop=\"size-200\">\n                <Heading level={4}>Benchmark Products</Heading>\n                <Flex direction=\"row\" marginTop=\"size-100\" gap=\"size-250\">\n                    <View flexGrow=\"1\">\n                        <ListBox selectionMode=\"none\">\n                            <Section title=\"Web Products\">\n                            {\n                                webProducts.map((webProduct) => {\n                                    return (\n                                        <Item key={webProduct}>\n                                            <Text>{webProduct}</Text>\n                                        </Item>\n                                    )\n                                })\n                            }\n                           </Section>\n                        </ListBox>\n                    </View>\n                    <View flexGrow=\"1\">\n                        <ListBox selectionMode=\"none\">\n                        <Section title=\"Mobile Products\">\n                        {\n                                mobileProducts.map((mobileProduct) => {\n                                    return (\n                                        <Item key={mobileProduct}>\n                                            <Text>{mobileProduct}</Text>\n                                        </Item>\n                                    )\n                                })\n                        }\n                        </Section>\n                    </ListBox>\n                    </View>\n                    <View flexGrow=\"1\">\n                        <ListBox selectionMode=\"none\">\n                        <Section title=\"Desktop Products\">\n                            {\n                                desktopProducts.map((desktopProduct) => {\n                                    return (\n                                        <Item key={desktopProduct}>\n                                            <Text>{desktopProduct}</Text>\n                                        </Item>\n                                    )\n                                })\n                            }\n                        </Section>\n                        </ListBox>\n                    </View>\n                </Flex>\n                \n            </Well>\n        )\n    }\n}\n\nexport default BenchmarkProducts;\n\n/*<View>\n                        <ListBox>\n                        {\n                                mobileProducts.map((mobileProduct) => {\n                                    return (\n                                        <Item key={mobileProduct}>\n                                            <Text>{mobileProduct}</Text>\n                                        </Item>\n                                    )\n                                })\n                        }\n                        </ListBox>\n                    </View>\n                    <View>\n                        <ListBox>\n                            {\n                                desktopProducts.map((desktopProduct) => {\n                                    return (\n                                        <Item key={desktopProduct}>\n                                            <Text>{desktopProduct}</Text>\n                                        </Item>\n                                    )\n                                })\n                            }\n                        </ListBox>\n                    </View>*/","import React, {Component} from 'react';\nimport { Flex, View } from '@adobe/react-spectrum';\nimport Chart from 'react-google-charts';\n\nclass MixedCharts extends Component{\n    constructor(props) {\n        super(props);\n    }\n\n    render()\n    {\n        let data = this.props.data;\n        let chartTitle = this.props.title;\n        let lowerBandRGB = this.props.lowerBandColor;\n        let upperBandRGB = this.props.upperBandColor;\n        return (\n            <Chart\n            width={'500px'}\n            height={'250px'}\n            loader={<div>Loading Chart</div>}\n            chartType=\"ComboChart\"\n            data={data}\n            options={{\n                title: chartTitle,\n                seriesType: 'bars',\n                vAxis: { format: 'decimal', minValue: 0, maxValue: 100 },\n                series: { 0: { color: '6A737B'}, 1: { color: 'ABB3B8'}, 2: { type: 'line', color: lowerBandRGB}, 3: { type: 'line', color: upperBandRGB } },\n                legend: { position: 'bottom' },\n                backgroundColor: 'F2F2F2'\n            }}\n            rootProps={{ 'data-testid': '1' }}\n            />\n        )\n    }\n}\n\nexport default MixedCharts;","import React, {Component} from 'react';\nimport { Well,Button, Flex, View, Image } from '@adobe/react-spectrum';\nimport { Tabs, Item } from '@react-spectrum/tabs';\nimport BenchmarkProducts from '../sub-components/BenchmarkProducts';\nimport MixedCharts from '../sub-components/MixedCharts';\n\nclass DefaultAqbPods extends Component{\n    constructor(props) {\n        super(props);\n    }\n\n    state = {\n        lowerBand: '80',\n        upperBand: '87',\n        data : \n        [\n            ['Product', 'Loc Fixed%', 'English Fixed%', 'Upper band', 'Lower band'],\n            ['Sign', 75, 65, 90, 80],\n            ['Stock', 82, 77, 90, 80],\n            ['AEM', 91, 68, 90, 80],\n            ['CC ECOMM', 88, 72, 90, 80],\n            ['Connect', 75, 72, 90, 80],\n        ],\n        options : {\n            title: 'Adobe Quality Band : Loc Fixed% : ',\n            \n            seriesType: 'bars',\n            vAxis: { viewWindow: { min: 0, max: 100 } },\n            series: { 0: { color: '6A737B'}, 1: { color: 'ABB3B8'}, 2: { type: 'line', color: '#0ba34d' }, 3: { type: 'line', color: '#b80909' } },\n            legend: { position: 'bottom' },\n            backgroundColor: 'F2F2F2'\n        }\n    }\n\n    render()\n    {\n        let platforms = [\"Web\", \"Desktop\", \"Mobile(iOS)\", \"Mobile(Android)\"];\n        return(\n            <Well>\n                <Tabs aria-label=\"Default Pods\">\n                    {\n                        platforms.map((platform) =>\n                        {\n                            return(\n                                <Item title={platform} key={platform+\"-pods\"}>\n                                    <Flex direction=\"row\" gap=\"size-100\" marginTop=\"size-100\">\n                                        <View>\n                                            <MixedCharts lowerBand={this.state.lowerBand} upperBand={this.state.upperBand} data={this.state.data} options={this.state.options}/>\n                                        </View>\n                                        <View>\n                                            <MixedCharts lowerBand={this.state.lowerBand} upperBand={this.state.upperBand} data={this.state.data} options={this.state.options}/>\n                                        </View>\n                                    </Flex>\n                                    <Button marginTop=\"size-200\" variant=\"cta\">Download {platform} pods - Q4'2020</Button>\n                                </Item>\n                            )\n                        })\n                    }\n                </Tabs>\n            </Well>\n        )\n    }\n}\n\nexport default DefaultAqbPods;","import React, {Component} from 'react';\nimport { MenuTrigger, Menu, ActionButton, Item, Flex, View, Text} from '@adobe/react-spectrum';\nimport ChevronDown from '@spectrum-icons/workflow/ChevronDown';\n\nclass MultiPickerMenu extends Component {\n    constructor(props) {\n        super(props);\n    }\n\n    render(){\n        let list = this.props.list;\n        let totalSelected = this.props.totalSelected;\n        let allSelectedKeys = this.props.allSelectedKeys;\n        let eventHandler = this.props.eventHandler;\n        return(\n                <MenuTrigger closeOnSelect={false} align=\"end\">\n                    <ActionButton>\n                        {totalSelected}\n                        <ChevronDown size=\"S\"/>\n                    </ActionButton>\n                    <Menu\n                        selectionMode=\"multiple\"\n                        selectedKeys={allSelectedKeys}\n                        onSelectionChange={(selectedKeys) => eventHandler(selectedKeys)}>\n                        {\n                            list.map(listItem => <Item key={listItem}>{listItem}</Item>)\n                        }\n                    >\n                    </Menu>\n                </MenuTrigger>\n            )\n        }\n}\n\nexport default MultiPickerMenu;\n\n/*\n<Flex direction=\"row\">\n                            <View>\n                                <Text>{totalSelected}</Text>\n                            </View>\n                            <View>\n                                <ChevronDown size=\"S\"/>\n                            </View>\n                            </Flex>\n*/","import React, {Component} from 'react';\nimport { Well,Button, Form, Text, Content, ButtonGroup, View, Flex, ActionButton, Item, Menu, TooltipTrigger, Tooltip, ProgressBar } from '@adobe/react-spectrum';\nimport {Grid, GridColumn, GridRow} from '@react/react-spectrum/Grid';\nimport MultiPickerMenu from './MultiPickerMenu';\nimport Datepicker from '@react/react-spectrum/Datepicker';\nimport Provider from '@react/react-spectrum/Provider';\nimport ComboBox from '@react/react-spectrum/ComboBox';\nimport RemoveCircle from '@spectrum-icons/workflow/RemoveCircle';\nimport NotFound from '@spectrum-icons/illustrations/NotFound';\nimport { Accordion, AccordionItem } from '@react/react-spectrum/Accordion';\nimport AxiosHelper from '../../services/AxiosHelper';\nimport Axios from 'axios';\nimport api from '../../services/ApiMap.json';\nimport MixedCharts from './MixedCharts';\nimport Chart from 'react-google-charts';\n\nclass CustomAqbPods extends Component{\n    constructor(props) {\n        super(props);\n    }\n\n    state = {\n        selectedProducts : [],\n        startDate : '',\n        endDate : '',\n        comboInputValue : '',\n        selectedComboKey : '',\n        isAddButtonDisabled : true,\n        isGenerateButtonDisabled : true,\n        duplicateProductSelected : false,\n        generatingPods : false,\n        plotAqbPods : false,\n        dataToPlot : []\n    }\n\n    productSelectionHandler(selected){\n        this.setState({ \n            selectedComboKey : selected,\n            isAddButtonDisabled : false\n        });\n    }\n\n    dateRangeSelectionHandler(selected){\n        this.setState({ \n            startDate : selected.start,\n            endDate : selected.end\n         }, () => { this.enableGenerateButton() });\n    }\n\n    onInputChange(value){\n        this.setState({ comboInputValue : value })\n    }\n\n    addProductToList = (event) => {\n        if(this.state.selectedProducts.includes(this.state.comboInputValue))\n        {\n            this.setState(\n                {\n                    isAddButtonDisabled : true,\n                    selectedComboKey : '',\n                    comboInputValue: '',\n                    duplicateProductSelected: true\n                }\n            )\n        }\n        else{\n            let arrayOfProducts = this.state.selectedProducts;\n            arrayOfProducts.push(this.state.selectedComboKey);\n\n            this.setState(\n                {\n                    selectedProducts : arrayOfProducts,\n                    isAddButtonDisabled : true,\n                    selectedComboKey : '',\n                    comboInputValue: '',\n                    duplicateProductSelected: false\n                }, () => { this.enableGenerateButton() }\n            )\n        }\n    }\n\n    removeSelectedProduct(productToRemove){\n        let selectedProductsArray = this.state.selectedProducts;\n        let index;\n        for(index=0; index<selectedProductsArray.length; index++){\n            if(selectedProductsArray[index] === productToRemove)\n                break;\n        }\n        selectedProductsArray.splice(index,1);\n        this.setState({ selectedProducts : selectedProductsArray }, () => { this.enableGenerateButton() } );\n        /*let index=0;\n        this.state.selectedProducts.map((product) => {\n            if(product === productToRemove){\n                break;\n            }\n            else{\n                index+=1;\n            }\n        })\n        this.state.selectedProducts.splice(index,1);*/\n    }\n\n    enableGenerateButton(){\n        if(this.state.selectedProducts.length > 0 && this.state.startDate != '' && this.state.endDate != '')\n        {\n            this.setState({ isGenerateButtonDisabled : false });\n        }\n        else if(this.state.selectedProducts.length === 0)\n        {\n            this.setState({ isGenerateButtonDisabled : true });\n        }\n    }\n\n    generateCustomPods = (event) => {\n        this.setState(\n            {\n                isGenerateButtonDisabled : true,\n                generatingPods : true,\n                plotAqbPods : false\n            }\n        )\n        let params = {\n                \"product_name\": this.state.selectedProducts,\n                \"start_date\": this.state.startDate,\n                \"end_date\": this.state.endDate\n        }\n\n        AxiosHelper.postMethodCall(api.pquaAqbApis.aqbPods, params)\n        .then((response) => {\n            if(response.status === 200)\n            {\n                this.plotCustomPods(response.data);\n            }\n        })\n        .catch((error) => {\n            console.log(\"Error encountered : \"+ error);\n            this.setState( { generatingPods : false } )\n        })\n    }\n\n    plotCustomPods(responseData){\n        let chartData, lowerBand, upperBand;\n        \n        for(let category in responseData){\n            chartData = [];\n            if(category === \"Loc Fixed\")\n            {\n                chartData.push([\"Product\", \"Loc Fixed%\", \"English Fixed%\", \"Upper band\", \"Lower band\"]);\n                responseData[category][\"Data\"].map((productData) => {\n                    chartData.push([productData.Product, productData.Values[\"Loc Bugs- Fixed\"], productData.Values[\"English\"], 80, 70]);\n                });\n            }\n            else if(category === \"Loc Deferred\")\n            {\n                chartData.push([\"Product\", \"Loc Deferred%\", \"English Deferred%\", \"Upper band\", \"Lower band\"]);\n                responseData[category][\"Data\"].map((productData) => {\n                    chartData.push([productData.Product, productData.Values[\"Loc Bugs - Deferred\"], productData.Values[\"English\"], 80, 70]);\n                });\n            }\n            responseData[category][\"Data\"] = chartData;\n        }\n        this.setState({ dataToPlot : responseData, plotAqbPods : true, generatingPods : false });\n    }\n\n    render()\n    {\n        let platforms = [\"Web\", \"Desktop\", \"Mobile(iOS)\", \"Mobile(Android)\"];\n        return(\n            <Well>\n                <Form \n                marginX=\"size-100\" \n                marginY=\"size-200\"\n                >\n                    <Flex gap=\"size-100\" and direction=\"row\" alignItems=\"end\">\n                        <View>\n                            <label for=\"custom-pods-product-selection\" class=\"spectrum-FieldLabel\">Select products</label>\n                            <Provider>\n                                <ComboBox\n                                    aria-label=\"Default\"\n                                    disabled={false}\n                                    invalid={false}\n                                    value={this.state.comboInputValue}\n                                    onChange={(value) => this.onInputChange(value)}\n                                    onSelect={(selected) => this.productSelectionHandler(selected)}\n                                    options={this.props.productList}\n                                    quiet={false}\n                                    required={false}\n                                />\n                            </Provider>\n                        </View>\n                        <View>\n                            <TooltipTrigger isOpen={this.state.duplicateProductSelected}>\n                                <ActionButton\n                                isDisabled={this.state.isAddButtonDisabled}\n                                onPress={this.addProductToList}>\n                                    Add\n                                </ActionButton>\n                                <Tooltip variant=\"negative\">Duplicate selection is not allowed!</Tooltip>\n                            </TooltipTrigger>\n                        </View>\n                        <View marginStart=\"size-200\">\n                            <label for=\"custom-pods-date-range\" class=\"spectrum-FieldLabel\">Select duration</label>\n                            <Provider>\n                                <Datepicker\n                                    aria-label=\"Date range\"\n                                    headerFormat=\"MMMM YYYY\"\n                                    max={\"today\"}\n                                    min={null}\n                                    placement=\"bottom\"\n                                    quiet={false}\n                                    required={true}\n                                    selectionType=\"range\"\n                                    startDay={0}\n                                    type=\"date\"\n                                    onChange={(selected) => this.dateRangeSelectionHandler(selected)} />\n                            </Provider>\n                        </View>\n                        <View marginStart=\"size-100\">\n                            <Button marginTop=\"size-200\" variant=\"cta\" isDisabled={this.state.isGenerateButtonDisabled} onPress={this.generateCustomPods}>Generate pods</Button>\n                        </View>\n                    </Flex>\n                    {\n                        this.state.selectedProducts.length > 0 ?\n                        <Provider>\n                            <Accordion\n                            aria-label=\"nested ComboBox\"\n                            ariaLevel={3}\n                            defaultSelectedIndex={0}\n                            multiselectable={false}\n                            onChange={function noRefCheck(){}}>\n                                <AccordionItem\n                                disabled={false}\n                                header=\"Selected Products\"\n                                onItemClick={function noRefCheck(){}}\n                                selected={false}>\n                                    <Menu>\n                                    {\n                                        this.state.selectedProducts.map((product) => \n                                        <Item key={product}>\n                                            <ActionButton aria-label=\"Remove product\" isQuiet onPress={() => this.removeSelectedProduct(product)}>\n                                                    <RemoveCircle size=\"S\"/>\n                                            </ActionButton>\n                                            <Text marginStart=\"size-250\">{product}</Text>    \n                                        </Item>)\n                                    }\n                                    </Menu>\n                                </AccordionItem>\n                            </Accordion>\n                        </Provider>\n                        :\n                        <>\n                        </>\n                    }\n                    {\n                        this.state.generatingPods?\n                        <View>\n                            <ProgressBar\n                            aria-label=\"Loading\"\n                            label=\"Fetching data... This may take a while.\"\n                            isIndeterminate\n                            />\n                        </View>\n                        :\n                        <></>\n                    } \n                    {\n                        this.state.plotAqbPods ?\n                        <Provider>\n                                <Grid variant=\"fluid\">\n                                    <GridRow>\n                                        <GridColumn size={5}>\n                                            <MixedCharts data={this.state.dataToPlot['Loc Fixed']['Data']} title={\"Adobe Quality Band : Loc Fixed% : \" + this.state.dataToPlot['Loc Fixed']['Lower band'] + \" - \" + this.state.dataToPlot['Loc Fixed']['Upper band']} lowerBandColor=\"#0ba34d\" upperBandColor=\"#b80909\"/>\n                                        </GridColumn>\n                                        <GridColumn size={5}>\n                                            <MixedCharts data={this.state.dataToPlot['Loc Deferred']['Data']} title={\"Adobe Quality Band : Loc Deferred% : \" + this.state.dataToPlot['Loc Deferred']['Lower band'] + \" - \" + this.state.dataToPlot['Loc Deferred']['Upper band']} lowerBandColor=\"#b80909\" upperBandColor=\"#0ba34d\"/>\n                                        </GridColumn>\n                                        <GridColumn size={5}>\n                                            <MixedCharts data={this.state.dataToPlot['Loc Deferred']['Data']} title={\"Adobe Quality Band : Loc Deferred% : \" + this.state.dataToPlot['Loc Deferred']['Lower band'] + \" - \" + this.state.dataToPlot['Loc Deferred']['Upper band']} lowerBandColor=\"#b80909\" upperBandColor=\"#0ba34d\"/>\n                                        </GridColumn>\n                                    </GridRow>\n                                    <GridRow>\n                                        <GridColumn size={4} offsetSize={9}>\n                                            <Button variant=\"cta\">Download pods</Button>\n                                        </GridColumn>\n                                    </GridRow>\n                                </Grid>\n                            </Provider>\n                        :\n                        <></>\n                    }\n                </Form>\n            </Well>\n        )\n    }\n}\n\nexport default CustomAqbPods;\n\n{/*<Grid columns={['1fr', '1fr']} gap=\"size-200\">\n                                <View backgroundColor=\"orange-400\">\n                                    <MixedCharts data={this.state.dataToPlot['Loc Fixed']['Data']} title={\"Adobe Quality Band : Loc Fixed% : \" + this.state.dataToPlot['Loc Fixed']['Lower band'] + \" - \" + this.state.dataToPlot['Loc Fixed']['Upper band']} lowerBandColor=\"#0ba34d\" upperBandColor=\"#b80909\"/>\n                                </View>\n                                <View backgroundColor=\"red-400\">\n                                    <MixedCharts data={this.state.dataToPlot['Loc Deferred']['Data']} title={\"Adobe Quality Band : Loc Deferred% : \" + this.state.dataToPlot['Loc Deferred']['Lower band'] + \" - \" + this.state.dataToPlot['Loc Deferred']['Upper band']} lowerBandColor=\"#b80909\" upperBandColor=\"#0ba34d\"/>\n                                </View>\n                                <View backgroundColor=\"red-400\">\n                                    <MixedCharts data={this.state.dataToPlot['Loc Deferred']['Data']} title={\"Adobe Quality Band : Loc Deferred% : \" + this.state.dataToPlot['Loc Deferred']['Lower band'] + \" - \" + this.state.dataToPlot['Loc Deferred']['Upper band']} lowerBandColor=\"#b80909\" upperBandColor=\"#0ba34d\"/>\n                                </View>\n                                <View backgroundColor=\"seafoam-700\" justifySelf=\"right\">\n                                    <Button variant=\"cta\">Download pods</Button>\n                                </View>\n                    </Grid>*/}\n\n                    {/*\n                        <Provider>\n                                <Grid variant=\"fluid\">\n                                    <GridRow>\n                                        <GridColumn size={5}>\n                                            \n                                                <MixedCharts data={this.state.dataToPlot['Loc Fixed']['Data']} title={\"Adobe Quality Band : Loc Fixed% : \" + this.state.dataToPlot['Loc Fixed']['Lower band'] + \" - \" + this.state.dataToPlot['Loc Fixed']['Upper band']} lowerBandColor=\"#0ba34d\" upperBandColor=\"#b80909\"/>\n                                            \n                                        </GridColumn>\n                                        <GridColumn size={5}>\n                                            \n                                                <MixedCharts data={this.state.dataToPlot['Loc Deferred']['Data']} title={\"Adobe Quality Band : Loc Deferred% : \" + this.state.dataToPlot['Loc Deferred']['Lower band'] + \" - \" + this.state.dataToPlot['Loc Deferred']['Upper band']} lowerBandColor=\"#b80909\" upperBandColor=\"#0ba34d\"/>\n                                            \n                                        </GridColumn>\n                                    </GridRow>\n                                    <GridRow>\n                                        <GridColumn size={5}>\n                                            <Button variant=\"cta\">Download pods</Button>\n                                        </GridColumn>\n                                        <GridColumn size={5}>\n                                            <Button variant=\"cta\">Download pods</Button>\n                                        </GridColumn>\n                                    </GridRow>\n                                </Grid>\n                            </Provider>\n                    */}","import React, {Component} from 'react';\nimport { withCookies } from 'react-cookie';\nimport { Well, Heading, View } from '@adobe/react-spectrum';\nimport { Tabs, Item } from '@react-spectrum/tabs';\nimport DefaultAqbPods from './sub-components/DefaultAqbPods';\nimport CustomAqbPods from './sub-components/CustomAqbPods';\nimport BenchmarkProducts from './sub-components/BenchmarkProducts';\n\nclass DownloadAqbPods extends Component{\n    constructor(props) {\n        super(props);\n    }\n\n    state = {\n        web : [\"Stock\", \"Admin Console\", \"CC ECOMM\", \"AEM\", \"Target\", \"Sign\" ],\n        desktop : [\"Adobe XD\", \"Illustrator\", \"Acrobat\", \"Premiere Pro\", \"Photoshop\", \"Dreamweaver\"],\n        mobile : [\"Fresco\", \"Capture\", \"XD Mobile\", \"Acrobat Reader\", \"Lightroom Mobile\" ]\n    }\n\n    render(){\n        let productList = this.props.productList;\n\n        return (\n        <Well  margin=\"size-800\">\n            <View marginX=\"size-1000\" marginY=\"size-200\">\n                <Heading level={2}>Download AQB Pods</Heading>\n                <Tabs aria-label=\"Download AQB Pods\" orientation=\"horizontal\">\n                    <Item title=\"Custom Pods\" key=\"custom-pods\">\n                        <CustomAqbPods productList={productList} index=\"0\"/>\n                        <BenchmarkProducts web={this.state.web} desktop={this.state.desktop} mobile={this.state.mobile}/>\n                        \n                    </Item>\n                    <Item title=\"Default Pods\" key=\"default-pods\">\n                        <DefaultAqbPods/>\n                        <BenchmarkProducts web={this.state.web} desktop={this.state.desktop} mobile={this.state.mobile}/>\n                        \n                    </Item>\n                </Tabs>\n            </View>\n        </Well>\n        )\n    }\n}\n\nexport default withCookies(DownloadAqbPods);","import React, { Component } from 'react';\nimport {Grid, View, IllustratedMessage, Heading, Content, Footer, Link, Flex, ProgressCircle} from '@adobe/react-spectrum';\nimport HeaderBar from './components/HeaderBar';\nimport ViewBugData from './components/ViewBugData';\nimport SidebarMenu from './components/SidebarMenu';\nimport AddUpdateProduct from './components/AddUpdateProduct';\nimport ExtractPquaAqbData from './components/ExtractPquaAqbData';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport DownloadAqbPods from './components/DownloadAqbPods';\nimport AxiosHelper from './services/AxiosHelper';\nimport api from './services/ApiMap.json';\nimport NotFound from '@spectrum-icons/illustrations/NotFound';\nimport Unavailable from '@spectrum-icons/illustrations/Unavailable';\nimport help from \"./resources/Help.json\";\nimport { GlaasAuth } from './services/GlaasAuth';\nimport { ManageSession } from './services/ManageSession';\n\nclass App extends Component {\n\n  state = {\n    productList : [],\n    categoryList : [],\n    serverError : false,\n    badRequest : false,\n    verifyingSession : false\n  }\n\n  setUserProductList(responseData){\n    let productArray = [];\n    responseData.map((entry) => {\n      if(entry.productName !== 'All' && !productArray.includes(entry.productName))\n        productArray.push(entry.productName);\n    })\n    this.setState({ productList : productArray })\n  }\n  \n  verifySessionDetails () {\n    let authToken = null;\n    \n    //if redirected after successful authentication\n    if(window.location.href.includes(\"access_token\")) {\n      console.log(\"Redirection complete, extracting authToken\");\n      authToken = GlaasAuth.parseUriWithHash(window.location.href);\n    }\n    else {\n      //if authToken is already saved\n      if(localStorage.getItem('pquaAuthToken') != null && localStorage.getItem('pquaAuthTokenExpires') != null){\n        authToken = localStorage.getItem(\"pquaAuthToken\");\n        console.log(\"Extracted authToken from storage\")\n        \n        if(ManageSession.ifSessionExpired()) {\n          console.log(\"Session expired, calling initiate()\")\n          GlaasAuth.authenticate();\n        }\n      }\n      //if first log in to the app\n      else{\n        console.log(\"Initiating auth workflow\");\n        GlaasAuth.authenticate();\n      }\n    }\n\n    console.log(\"Performing checkSession call\")\n    GlaasAuth.checkSession(authToken)\n    .then((response) => {\n        console.log(\"Saving validated authToken, expiration time, and user details\")\n        localStorage.setItem('pquaAuthToken', authToken);\n        localStorage.setItem('pquaAuthTokenExpires', response.expiresOn);\n        localStorage.setItem('userLdap',response.ldap);\n        localStorage.setItem('userName', response.name);\n        localStorage.setItem('userEmail', response.email);\n        console.log(\"Fetching data for app\");\n        this.fetchProductsAndCategories();\n    })\n    .catch((error) => {\n        console.log(error);\n        console.log(\"Removing user info from localStorage\")\n        localStorage.clear();\n    })\n  }\n  \n\n  fetchProductsAndCategories(){\n    let categoryListArray = [];\n    //Fetching all products\n    let authToken = localStorage.getItem(\"pquaAuthToken\");\n\n    if(authToken != null){\n      AxiosHelper.glaasGetMethodCall(api.glaasUrl+api.glaasProductApi,{ headers : { \"accept\": \"application/json\", \"Authorization\" : api.clientId+\":\"+authToken }})\n      .then((response) => {\n        if(response.status === 200) {\n          this.setUserProductList(response.data);\n          \n          this.setState({\n            verifyingSession : false\n          })\n        }\n        else if(response.status == 401) {\n          console.log();\n          this.setState({\n            badRequest : true,\n            verifyingSession : false\n          })\n        }\n      })       \n      .catch((error) => {\n        console.log(error);\n        this.setState({\n          serverError : true,\n          verifyingSession : false\n        })\n      })\n    }\n\n    //Fetching all categories\n    AxiosHelper.getMethodCall(api.viewerApis.allBugCategories,{ headers : { \"accept\": \"application/json\" }})\n      .then((response) => {\n        if (response.status === 200) {\n            response.data.map((category) => {\n            categoryListArray.push(category[1]);\n          })\n          this.setState({\n            categoryList : categoryListArray,\n          })\n        }\n        else if(response.status == 400) {\n          console.log();\n          this.setState({\n            badRequest : true\n          })\n        }\n    })       \n    .catch((error) => {\n      console.log(error);\n      this.setState({\n        serverError : true\n      })\n    })\n\n  }\n\n  componentDidMount(){\n    //this.verifySessionDetails();\n    this.fetchProductsAndCategories();\n  }\n\n  renderAppContent(){\n    if(this.state.serverError || this.state.badRequest){\n      return (\n        <View>\n          <IllustratedMessage>\n            <NotFound/>\n            <Heading>Unable to Connect</Heading>\n              <Content>\n                Unable to load data. Please check with the admin.\n              </Content>\n          </IllustratedMessage>\n        </View>\n      )\n    }\n    else {\n      if(this.state.verifyingSession){\n        return(\n          <Flex direction=\"row\" gap=\"size-100\" alignSelf=\"center\" justifySelf=\"center\">\n            <ProgressCircle alignSelf=\"center\" size='M'isIndeterminate/>\n            <Heading level={1}>Verifying session details...</Heading>\n          </Flex>\n        )\n      }\n      else{\n        return (\n          <View backgroundColor=\"gray-75\" gridArea=\"content\">\n            <Switch>\n              <Route path=\"/pqua\" exact render={(props) => <ExtractPquaAqbData productList = {this.state.productList} /> } />\n              <Route path=\"/download-pods\" exact component={ (props) => <DownloadAqbPods productList = {this.state.productList}/> } />\n              <Route path=\"/bug-data\" exact component={ (props) => <ViewBugData productList = {this.state.productList} categoryList = {this.state.categoryList}/> } />\n              <Route path=\"/add-update-queries\" exact render={(props) => <AddUpdateProduct productList = {this.state.productList} categoryList = {this.state.categoryList} />} />\n              <Route path=\"/pqua-data\" exact render={(props) => <ExtractPquaAqbData productList = {this.state.productList} /> } />\n            </Switch>\n          </View>\n        )\n      }                \n    }\n  }\n\n  render()\n  {    \n    return (\n      <Router>\n        <Grid\n          areas={['sidebar content', 'footer footer']}\n          columns={['1fr', '5fr']}\n          rows={['15fr', '0.5fr']}\n          height={window.innerHeight}>\n            <View backgroundColor=\"gray-200\" gridArea=\"sidebar\">\n            <SidebarMenu/>\n            </View>\n            {\n              this.renderAppContent()\n            }\n          <View backgroundColor=\"gray-100\" gridArea=\"footer\" justifySelf=\"center\" margin=\"size-50\">\n            <Footer >\n              <Flex \n              direction=\"row\"\n              gap=\"size-100\">\n                <Link isQuiet>\n                  <a href={help.faqsPage} target=\"_blank\">\n                  Help \n                  </a>\n                </Link>\n                <Link isQuiet>\n                  <a href={help.pquaWiki} target=\"_blank\">\n                  Wiki\n                  </a>\n                </Link>\n                <Link\n                isQuiet\n                onPress={(e) => {\n                  window.location = help.pquaGrpEmail\n                }}>\n                  Contact Us\n                </Link>\n              </Flex>\n            </Footer>\n          </View>\n      </Grid>\n      </Router>\n    );\n  }\n}\n//<Route path=\"/productconfig\" exact component={ AddUpdateProduct } />\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { createSlice } from '@reduxjs/toolkit'\n\nexport const userSlice = createSlice({\n  name: 'user',\n  initialState: {\n    value: {\n      name: \"\",\n      ldap: \"\",\n      email: \"\"\n    }\n  },\n  reducers: {\n    setUser: (state, action) => {\n      state.value.name = action.payload.name;    \n      state.value.ldap = action.payload.ldap;    \n      state.value.email = action.payload.email;    \n    },\n    removeUser: state => {\n      state.value.name = null;\n      state.value.ldap = null;\n      state.value.email = null;\n    }\n  }\n})\n\nexport const { setUser, removeUser } = userSlice.actions\n\nexport const selectUser = state => state.user.value\n\nexport default userSlice.reducer","import { configureStore } from '@reduxjs/toolkit'\nimport userReducer from './redux/reducers/userSlice'\nimport bugDataResultsReducer from './redux/reducers/bugDataResultsSlice'\nimport showTableViewReducer from './redux/reducers/showTableViewSlice'\nimport pquaResultsReducer from './redux/reducers/pquaResultsSlice'\n\nconst store = configureStore({\n  reducer: {\n    bugDataResults: bugDataResultsReducer,\n    showTableView: showTableViewReducer,\n    pquaResults: pquaResultsReducer\n  },\n});\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider, defaultTheme } from '@adobe/react-spectrum';\nimport { Provider as ReduxProvider }  from 'react-redux'\nimport store from './store';\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider theme={defaultTheme} colorScheme=\"light\">\n        <ReduxProvider store={store}>\n          <App/>\n        </ReduxProvider>\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n//theme={defaultTheme} colorScheme=\"light\""],"sourceRoot":""}